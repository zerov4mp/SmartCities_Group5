(define (domain SliosEnvironmentDomain)

    (:requirements 
        :strips 
        :typing 
        :negative-preconditions
        :disjunctive-preconditions
        :conditional-effects)

    (:types room table outside - object)

    (:predicates 
        (lowTemp ?r - room)
        (midTemp ?r - room)
        (highTemp ?r - room) 
        (lowHum ?r - room)
        (midHum ?r - room)
        (highHum ?r - room)
        (higherOutsideTemp ?r - room)
        (lowerOutsideTemp ?r - room)
        (higherOutsideHum ?r - room)
        (lowerOutsideHum ?r - room)
        (highCO2 ?r - room)
        (badWeather ?o - outside)

        (lowLight ?r - room)
        (lowlightOutside ?o - outside)
        
        (loudSound ?t - table)
        
        (presenceInRoom ?r - room )
        (windowOpen ?r - room)
        (climateOn ?r - room)
        (lightOn ?r - room)
        
        (weathersafe ?r - room)

        (efficient-light ?r - room)
    )

    

    (:action set-weathersafe 
        :parameters (?o - outside ?r - room) 
        :precondition   (or     (and (badWeather ?o) (not(windowOpen ?r)) (midTemp ?r) (midHum ?r) (not(highCO2 ?r)))
                                (and (not(badWeather ?o)) (not(climateOn ?r)) (midTemp ?r) (midHum ?r) (not(highCO2 ?r)))
                        ) 
        :effect (and (weathersafe ?r))
    )

    (:action climate-off 
        :parameters (?o - outside ?r - room) 
        :precondition   (and    (climateOn ?r)
                                (or (and(not(badWeather ?o))
                                        (or (and (lowTemp ?r) (higherOutsideTemp ?r)) 
                                            (and (highTemp ?r) (lowerOutsideTemp ?r))
                                            (and (midTemp ?r) (not(higherOutsideTemp ?r)) (not(lowerOutsideTemp ?r)))) 
                                        (or (and (lowHum ?r) (higherOutsideHum ?r))
                                            (and (highHum ?r) (lowerOutsideHum ?r))
                                            (and (midHum ?r) (not(higherOutsideHum ?r)) (not(lowerOutsideHum ?r)))) )
                                    (and(midTemp ?r) (midHum ?r) (not(highCO2 ?r)))
                                 ) 
                        ) 
        :effect (and (not(climateOn ?r)))
    )
    (:action climate-on 
        :parameters (?o - outside ?r - room) 
        :precondition   (and    (not(climateOn ?r))
                                (not(windowOpen ?r))
                                (not(and(midTemp ?r) (midHum ?r) (not(highCO2 ?r)))) 
                                (or (badWeather ?o)
                                    (or (not(or (and (lowTemp ?r) (higherOutsideTemp ?r)) 
                                                (and (highTemp ?r) (lowerOutsideTemp ?r))
                                                (and (midTemp ?r) (not(higherOutsideTemp ?r)) (not(lowerOutsideTemp ?r)))))
                                        (not(or (and (lowHum ?r) (higherOutsideHum ?r))
                                                (and (highHum ?r) (lowerOutsideHum ?r))
                                                (and (midHum ?r) (not(higherOutsideHum ?r)) (not(lowerOutsideHum ?r)))))
                                    )
                                ) 
                        )
        :effect (and    (not(lowTemp ?r)) (midTemp ?r) (not(highTemp ?r)) 
                        (not(lowHum ?r)) (midHum ?r) (not(highHum ?r))
                        (not(highCO2 ?r)) (weathersafe ?r) (climateOn ?r))             
    )
    (:action keep-climate-on 
        :parameters (?o - outside ?r - room) 
        :precondition   (and    (climateOn ?r)
                                (not(windowOpen ?r))
                                (not(and(midTemp ?r) (midHum ?r) (not(highCO2 ?r)))) 
                                (or (badWeather ?o)
                                    (or (not(or (and (lowTemp ?r) (higherOutsideTemp ?r)) 
                                                (and (highTemp ?r) (lowerOutsideTemp ?r))
                                                (and (midTemp ?r) (not(higherOutsideTemp ?r)) (not(lowerOutsideTemp ?r)))))
                                        (not(or (and (lowHum ?r) (higherOutsideHum ?r))
                                                (and (highHum ?r) (lowerOutsideHum ?r))
                                                (and (midHum ?r) (not(higherOutsideHum ?r)) (not(lowerOutsideHum ?r)))))
                                    )
                                ) 
                        )
        :effect (and    (not(lowTemp ?r)) (midTemp ?r) (not(highTemp ?r)) 
                        (not(lowHum ?r)) (midHum ?r) (not(highHum ?r))
                        (not(highCO2 ?r)) (weathersafe ?r) (climateOn ?r))             
    )
    (:action window-close 
        :parameters (?o - outside ?r - room) 
        :precondition   (and    (windowOpen ?r)  
                                (or (badWeather ?o)
                                    (and (lowTemp ?r) (not(higherOutsideTemp ?r)))
                                    (and (highTemp ?r) (not(lowerOutsideTemp ?r)))
                                    (and (midTemp ?r) (or   (higherOutsideTemp ?r) 
                                                            (lowerOutsideTemp ?r)))
                                    (and (lowHum ?r) (not(higherOutsideHum ?r)))
                                    (and (highHum ?r) (not(lowerOutsideHum ?r)))
                                    (and (midHum ?r) (or   (higherOutsideHum ?r) 
                                                            (lowerOutsideHum ?r)))) 
                        )
        :effect (and    (not(windowOpen ?r)) (weathersafe ?r))
    )
    (:action window-open 
        :parameters (?o - outside ?r - room) 
        :precondition   (and    (not(climateOn ?r))
                                (not(windowOpen ?r)) 
                                (not(badWeather ?o)) 
                                (or (and (lowTemp ?r) (higherOutsideTemp ?r)) 
                                    (and (highTemp ?r) (lowerOutsideTemp ?r))
                                    (and (midTemp ?r) (not(higherOutsideTemp ?r)) (not(lowerOutsideTemp ?r)))) 
                                (or (and (lowHum ?r) (higherOutsideHum ?r))
                                    (and (highHum ?r) (lowerOutsideHum ?r))
                                    (and (midHum ?r) (not(higherOutsideHum ?r)) (not(lowerOutsideHum ?r)))))
        :effect (and    (not(lowTemp ?r)) (midTemp ?r) (not(highTemp ?r)) 
                        (not(lowHum ?r)) (midHum ?r) (not(highHum ?r))
                        (not(highCO2 ?r)) (weathersafe ?r) (windowOpen ?r))
    )
    (:action keep-window-open 
        :parameters (?o - outside ?r - room) 
        :precondition   (and    (not(climateOn ?r))
                                (windowOpen ?r) 
                                (not(badWeather ?o)) 
                                (or (and (lowTemp ?r) (higherOutsideTemp ?r)) 
                                    (and (highTemp ?r) (lowerOutsideTemp ?r))
                                    (and (midTemp ?r) (not(higherOutsideTemp ?r)) (not(lowerOutsideTemp ?r)))) 
                                (or (and (lowHum ?r) (higherOutsideHum ?r))
                                    (and (highHum ?r) (lowerOutsideHum ?r))
                                    (and (midHum ?r) (not(higherOutsideHum ?r)) (not(lowerOutsideHum ?r)))))
        :effect (and    (not(lowTemp ?r)) (midTemp ?r) (not(highTemp ?r)) 
                        (not(lowHum ?r)) (midHum ?r) (not(highHum ?r))
                        (not(highCO2 ?r)) (weathersafe ?r) (windowOpen ?r))
    )
    (:action light-on 
        :parameters (?r - room) 
        :precondition (and (not(lightOn ?r)) (lowLight ?r) (not(efficient-light ?r)) (presenceInRoom ?r ))
        :effect (and (not(lowLight ?r)) (lightOn ?r) (efficient-light ?r))
    )
    (:action light-off-low
        :parameters (?r - room ?o - outside) 
        :precondition (and (lightOn ?r) (not(efficient-light ?r)) (not(presenceInRoom ?r )) (lowlightOutside ?o))
        :effect (and (not(lightOn ?r)) (lowLight ?r) (efficient-light ?r))
    )
    (:action light-off-high
        :parameters (?r - room ?o - outside) 
        :precondition (and (lightOn ?r) (not(efficient-light ?r)) (not(lowlightOutside ?o)))
        :effect (and (not(lightOn ?r)) (not(lowLight ?r)) (efficient-light ?r))
    )
    (:action keep-light-off
        :parameters (?r - room ?o - outside) 
        :precondition (or (and (lowLight ?r) (not(presenceInRoom ?r)) (not(efficient-light ?r)))
                            (and (not(lowLight ?r)) (presenceInRoom ?r) (not(efficient-light ?r))))
        :effect (and  (lowLight ?r) (efficient-light ?r))
    )
    (:action keep-light-on
        :parameters (?r - room ?o - outside) 
        :precondition (and (or (and(lightOn ?r) (presenceInRoom ?r ) (lowlightOutside ?o) (not(efficient-light ?r)))
                                ));(and (not(lowLight ?r)) (presenceInRoom ?r ) (lowlightOutside ?o) ) (not(efficient-light ?r))
        :effect (and  (efficient-light ?r))
    )
    (:action reduce-sound-level 
        :parameters (?t - table) 
        :precondition (and (loudSound ?t))
        :effect (and (not(loudSound ?t)))
    )

    
)